package chaper_two;

import java.util.Objects;

/**
 * . Объяснить и проиллюстрировать принцип работы методов equals о и hashcode о в языке Java.
 */

public class task46 {

    /**
     * Переопределяя метод equals(), обязательно соблюдай эти требования:
     * Рефлексивность.
     *
     * Любой объект должен быть equals() самому себе.
     * Мы уже учли это требование. В нашем методе указано:
     *
     * if (this == o) return true;
     * Симметричность.
     *
     * Если a.equals(b) == true, то и b.equals(a) должно возвращать true.
     * Этому требованию наш метод тоже соответствует.
     *
     * Транзитивность.
     *
     * Если два объекта равны какому-то третьему объекту, значит, они должны быть равны друг и другу.
     * Если a.equals(b) == true и a.equals(c) == true, значит проверка b.equals(c) тоже должна возвращать true.
     *
     * Постоянность.
     *
     * Результаты работы equals() должны меняться только при изменении входящих в него полей. Если данные двух объектов не менялись, результаты проверки на equals() должны быть всегда одинаковыми.
     *
     * Неравенство с null.
     *
     * Для любого объекта проверка a.equals(null) должна возвращать false
     * Это не просто набор каких-то «полезных рекомендаций», а именно жесткий контракт методов, прописанный в документации Oracle
     * -------------------------------------------------------------------------------------------------------------------------------------------
     * Для метода hashCode() есть официальные требования, прописанные в документации Oracle:
     * Если два объекта равны (т.е. метод equals() возвращает true), у них должен быть одинаковый хэш-код.
     *
     * Иначе наши методы будут лишены смысла. Проверка по hashCode(), как мы и сказали, должна идти первой для повышения быстродействия. Если хэш-коды будут разными, проверка вернет false, хотя объекты на самом деле равны (согласно нашему определению в методе equals()).
     *
     * Если метод hashCode() вызывается несколько раз на одном и том же объекте, каждый раз он должен возвращать одно и то же число.
     *
     * Правило 1 не работает в обратную сторону. Одинаковый хэш-код может быть у двух разных объектов.
     */

    public static void main(String[] args) {

        Car car1 = new Car();
        car1.model = "Ferrari";
        car1.maxSpeed = 300;

        Car car2 = new Car();
        car2.model = "Ferrari";
        car2.maxSpeed = 300;

        System.out.println(car1 == car2);
        System.out.println(car1.equals(car2));
    }

    public static class Car {

        String model;
        int maxSpeed;

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Car car = (Car) o;
            return maxSpeed == car.maxSpeed && Objects.equals(model, car.model);
        }

        @Override
        public int hashCode() {
            return Objects.hash(model, maxSpeed);
        }
    }
}
